VERSION 11/16 9:30 - BÃ©atrice Girard

## COMMENTS
## The common factor matrices/eigenvalues obtained are right.
## Will look at the partial factors during lunch break
## I used generalized svd, I have to ask the prof. if we are allowed use the function "gsvd"

# ------ To load the data
```{r}
load_data <- function(filename){
  data <- read.csv(filename, header = FALSE, stringsAsFactors = FALSE, fill = TRUE)

  line1 <- gsub("[^A-Za-z0-9]", ",", data[1,1])
  line1 <- gsub(",,"," ",line1)
  line1 <- gsub(",","",line1)

  data[1,] <- strsplit(line1," ")[[1]]
  colnames(data) = data[1, ]
  rownames(data) = data[,1]
  data = data[-1,-1]
  data
}

# We run the function
wines <- load_data('wines.csv')

```

# --------- To scale and center
```{r}

preprocess <- function(indices,data){
  M = data.matrix(data[,indices])
  colnames(M) <- NULL
  rownames(M) <- NULL
  N = scale(M, center = TRUE, scale = FALSE)
  N = scale(N, center = FALSE, scale = apply(N, 2, function(x) sqrt(sum(x^2))))
  N
}

# We run the function
sets = list(1:6,7:12,13:18,19:23,24:29,30:34,35:38,39:44,45:49,50:53)
length_sets = unlist(lapply(sets, length))
K = length(sets)

tables = list()
for (k in 1:K){
  tables[[k]] <- preprocess(sets[[k]],wines)
}

```
# --------- SVD decomposition
```{r}

pca <- function(M){
  # This function returns the svd of a matrix and the associated weight.
  svdM = svd(M)
  G = svdM$u %*% diag(svdM$d)
  svdM$weight = 1/(max(svdM$d)^2)
  svdM
}

#weighted_tables = lapply(tables,FUN = function(A){A*sqrt(pca(A)$weight)})

concat_tables = do.call(cbind, tables)

weights = unlist(lapply(tables,FUN = function(A){pca(A)$weight}))

weightsA = c()
for (k in 1:K){
  weightsA <- c(weightsA, rep(weights[k],length_sets[k]))
}

A = diag(weightsA)

weightsM = rep(1/12,12)
#M = diag(rep(1/12,12))


# WARNING : Uses the package MFAg
finalsvd <- GSVD(concat_tables, PLin = weightsM, PCol = weightsA)

P <- finalsvd$u
D <- diag(finalsvd$d)
Q <- finalsvd$v

EigenValues <- finalsvd$d
CommonFactor <- P %*% D

PartialFactor = concat_tables
for (k in 1:K){
  PartialFactor[,sets[[k]]] <- K*weights[k]*tables[[k]]*Q[sets[k],]
}


```
